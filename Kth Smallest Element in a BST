# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        '''        
        Steps:
            1. Perform inorder traversal(BST is always in order)
            2. When you have done k traverals --> return the curr.val
            3. Increment to right each iteration
        
        '''
        
        counter = 0
        stack = []
        curr = root
        
        while curr or stack:
            while curr:
                stack.append(curr)
                curr = curr.left
            
            curr = stack.pop()
            counter += 1 
            if counter == k:
                return curr.val
            curr = curr.right
            
