# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        '''
        Steps:
            1. Find the middle node
            2. Reverse right side of LL
            3. Merge the left and right side
        '''
        
        slow = head
        fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
        prev = None
        curr = slow
        while curr:
            tmp = curr.next
            curr.next = prev
            prev = curr
            curr = tmp
            
        # 1 2 3 
        # 6 5 4 N
        #1 --> 6 --> 2 --> 5 --> etc
        first, second = head, prev
        while second.next:
            first.next, first = second, first.next
            second.next, second = first, second.next

            
        
            
        
