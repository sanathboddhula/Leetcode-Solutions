# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    from collections import deque 
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        if not root:
            return False
        
        q = deque()
        q.append(root.left)
        q.append(root.right)
        
        while q:
            left = q.popleft()
            right = q.popleft()
            
            #left empty and right empty --> Still symmetric
            if not left and not right:
                continue
            
            #not symmetric
            if not left or not right or left.val != right.val:
                    return False
            
            q.append(left.left)
            q.append(right.right)
            
            q.append(left.right)
            q.append(right.left)

        return True
    
    '''
    class Solution:
        def isSymmetric(self, root: Optional[TreeNode]) -> bool:
            if not root:
                return True

            queue = deque()
            queue.append(root.left)
            queue.append(root.right)

            while queue:
                left = queue.popleft()
                right = queue.popleft()

                if not left and not right:
                    continue
                if not left or not right or left.val != right.val:
                    return False

                queue.append(left.left)
                queue.append(right.right)

                queue.append(left.right)
                queue.append(right.left)

            return True
    '''
