class Solution:
    def search(self, nums: List[int], target: int) -> int:
        '''
        Steps:
            1. Determine if midpoint is greater or less than left/right pointer
            2. Go to corresponding left or right portion
            3. Determine if target is within the l/r pointer - middle range
            4. Make proper pointer adjustments
        
        '''
        
        l, r = 0, len(nums) - 1
        
        while l <= r:
            mid = (l + r) // 2
            
            #if target == midpoint
            if target == nums[mid]:
                return mid
            
            # left sorted portion
            if nums[l] <= nums[mid]:
                #target is on the right side
                if target > nums[mid] or target < nums[l]:
                    l = mid + 1
                #target is on the left side
                else:
                    r = mid - 1
            # right sorted portion
            elif nums[r] > nums[mid]:
                #target is on the left side
                if target < nums[mid] or target > nums[r]:
                    r = mid - 1
                #target is on the right side
                else:
                    l = mid + 1
                    
                    
        return -1
-
