# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        
        #DFS Traversal using stack
        if not root:
            return 0
        
        level = 1
        stack = [[root, 1]]
        while stack:
            for i in range(len(stack)):
                node, depth = stack.pop()
                if node:
                    level = max(level, depth)
                    stack.append([node.left, depth + 1])
                    stack.append([node.right, depth + 1])
        return level
        
        '''
        #BFS level order traversal DEQUE
        if not root:
            return 0
        
        level = 0    
        queue = deque([root])
        while queue:
            for i in range(len(queue)):
                node = queue.popleft()
                if node.left != None:
                    queue.append(node.left)
                if node.right != None:
                    queue.append(node.right)
            level +=1
        return level
        '''
        
        
        
        
        '''
        Recursive DFS:
        
        #base case: when head equals None
        if root == None:
            return 0
        
        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))
        '''
        
