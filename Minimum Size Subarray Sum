class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        
        l = 0
        runningSum = 0
        minLength = float('inf')
        
        for r in range(len(nums)):
            runningSum += nums[r]
            while runningSum >= target:
                minLength = min(minLength, r - l + 1)
                runningSum -= nums[l]
                l += 1
                
        if minLength == float('inf'):
            return 0
            
        return minLength 
                
            
--------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        
        #first find maximum subarray 
        #remaining values are the size of min subarray
        
        window_start = 0
        minSubarrayLen = float('inf')
        runningSum = 0 
        
        for window_end in range(len(nums)):
            runningSum += nums[window_end]
            
            while runningSum >= target:
                #update minSubarrayLen 
                minSubarrayLen = min(minSubarrayLen, window_end - window_start + 1)
                runningSum -= nums[window_start]
                window_start += 1
            
        if minSubarrayLen == float("inf"):
            return 0
        
        return minSubarrayLen
